#!/usr/bin/python

import gobject

import sys
import os
import dbus
import dbus.mainloop.glib
from optparse import OptionParser

from pprint import pformat

email = "BEGIN:BMSG\n\
VERSION:1.0\n\
STATUS:UNREAD\n\
TYPE:EMAIL\n\
FOLDER:telecom/msg/inbox\n\
BEGIN:VCARD\n\
VERSION:2.1\n\
N:Mat\n\
EMAIL:sragavan@gmail.com\n\
END:VCARD\n\
BEGIN:BENV\n\
BEGIN:VCARD\n\
VERSION:2.1\n\
N:Tablet\n\
EMAIL:meegotabletmail@gmail.com\n\
END:VCARD\n\
BEGIN:BBODY\n\
PARTID:0\n\
ENCODING:8BIT\n\
CHARSET:UTF-8\n\
LENGTH:966\n\
BEGIN:MSG\n\
MIME-Version: 1.0\n\
Content-Type: text/plain\n\
Content-Transfer-Encoding: quoted-printable\n\
Date:Thu, 6 Dec 2012 21:13:04 +0530\n\
Subject:You have more friends on Facebook than you think\n\
To:\"MeeGo Tablet\" <meegotabletmail@gmail.com>\n\
Cc:\n\
Message-ID:2147483660\n\
From:\"Evolutio\" <update+zj4yo_2yso49@facebookmail.com>\n\
\n\
facebook=20Find=20more=20of=20your=20friends.=20The=20fastest=20way=20to=20find=20all=20of=20your=20frie=\n\
nds=20on=20Facebook=20is=20importing=20your=20email=20contacts.=20Once=20you've=20imported=20your=20=\n\
contacts=20you=20can=20view,=20manage=20or=20delete=20them=20at=20any=20time.=20Find=20Friends=20Go=20to=\n\
=20Facebook=20This=20message=20was=20sent=20to=20meegotabletmail@gmail.com.=20If=20you=20don't=20w=\n\
ant=20to=20receive=20these=20emails=20from=20Facebook=20in=20the=20future,=20please=20unsubscribe.=\n\
=0D=0AFacebook,=20Inc.,=20Attention:=20Department=20415,=20PO=20Box=2010005,=20Palo=20Alto,=20CA=\n\
=2094303\n\
END:MSG\n\
END:BBODY\n\
END:BENV\n\
END:BMSG"

phone= "BEGIN:BMSG\n\
VERSION:1.0\n\
STATUS:UNREAD\n\
TYPE:SMS_GSM\n\
FOLDER:telecom/msg/outbox\n\
BEGIN:VCARD\n\
VERSION:3.0\n\
N:Tablet\n\
TEL;TYPE=WORK:0123456789\n\
END:VCARD\n\
BEGIN:BENV\n\
BEGIN:VCARD\n\
VERSION:3.0\n\
N:Srini\n\
TEL;TYPE=WORK:1234567890\n\
END:VCARD\n\
BEGIN:BBODY\n\
CHARSET:UTF-8\n\
LENGTH:10\n\
BEGIN:MSG\n\
Properties\n\
END:MSG\n\
END:BBODY\n\
END:BENV\n\
END:BMSG"

def unwrap(x):
    """Hack to unwrap D-Bus values, so that they're easier to read when
    printed. Taken from d-feet """

    if isinstance(x, list):
        return map(unwrap, x)

    if isinstance(x, tuple):
        return tuple(map(unwrap, x))

    if isinstance(x, dict):
        return dict([(unwrap(k), unwrap(v)) for k, v in x.iteritems()])

    for t in [unicode, str, long, int, float, bool]:
        if isinstance(x, t):
            return t(x)

    return x

def parse_options():
	parser.add_option("-d", "--device", dest="device",
			help="Device to connect", metavar="DEVICE")
	parser.add_option("-c", "--chdir", dest="new_dir",
			help="Change current directory to DIR", metavar="DIR")
	parser.add_option("-l", "--lsdir", action="store_true", dest="ls_dir",
			help="List folders in current directory")
	parser.add_option("-v", "--verbose", action="store_true", dest="verbose")
	parser.add_option("-L", "--lsmsg", action="store", dest="ls_msg",
			help="List messages in supplied CWD subdir")
	parser.add_option("-g", "--get", action="store", dest="get_msg",
			help="Get message contents")
	parser.add_option("--get-properties", action="store", dest="get_msg_properties",
			help="Get message properties")
	parser.add_option("--mark-read", action="store", dest="mark_msg_read",
			help="Marks the messages as read")
	parser.add_option("--mark-unread", action="store", dest="mark_msg_unread",
			help="Marks the messages as unread")
	parser.add_option("--mark-deleted", action="store", dest="mark_msg_deleted",
			help="Deletes the message from the folder")
	parser.add_option("--mark-undeleted", action="store", dest="mark_msg_undeleted",
			help="Undeletes the message")
	parser.add_option("-u", "--update-inbox", action="store_true", dest="update_inbox",
			help="Checks for new mails")
	parser.add_option("-s", "--test-send-mail", action="store_true", dest="send_mail",
			help="Checks for new mails")

	return parser.parse_args()

def set_folder(session, new_dir):
	session.SetFolder(new_dir)

class MapClient:
	def __init__(self, session_path, verbose=False):
		self.progress = 0
		self.transfer_path = None
		self.props = dict()
		self.verbose = verbose
		self.path = session_path
		bus = dbus.SessionBus()
		obj = bus.get_object("org.bluez.obex.client", session_path)
		self.session = dbus.Interface(obj, "org.bluez.obex.Session")
		self.map = dbus.Interface(obj, "org.bluez.obex.MessageAccess")
		bus.add_signal_receiver(self.transfer_complete,
				dbus_interface="org.bluez.obex.Transfer",
				signal_name="Complete",
				path_keyword="path")
		bus.add_signal_receiver(self.transfer_error,
				dbus_interface="org.bluez.obex.Transfer",
				signal_name="Error",
				path_keyword="path")

	def create_transfer_reply(self, reply):
		(path, properties) = reply
		self.transfer_path = path
		self.props[path] = properties
		if self.verbose:
			print "Transfer created: %s (file %s)" % (path,
							properties["Filename"])

	def generic_reply(self):
		if self.verbose:
			print "Operation succeeded"

	def error(self, err):
		print err
		mainloop.quit()

	def transfer_complete(self, path):
		if path != self.transfer_path:
			return
		if self.verbose:
			print "Transfer finished"
		properties = self.props.get(path)
		if properties == None:
			return
		f = open(properties["Filename"], "r")
		os.remove(properties["Filename"])
		print f.readlines()

	def transfer_error(self, code, message, path):
		if path != self.transfer_path:
			return
		print "Transfer finished with error %s: %s" % (code, message)
		mainloop.quit()

	def set_folder(self, new_dir):
		self.map.SetFolder(new_dir)

	def list_folders(self):
		for i in self.map.ListFolders(dict()):
			print "%s/" % (i["Name"])

	def list_messages(self, folder):
		ret = self.map.ListMessages(folder, dict())
		print pformat(unwrap(ret))

	def get_message(self, handle):
		self.map.ListMessages("", dict())
		path = self.path + "/message" + handle
		obj = bus.get_object("org.bluez.obex.client", path)
		msg = dbus.Interface(obj, "org.bluez.obex.Message")
		msg.Get("", True, reply_handler=self.create_transfer_reply,
						error_handler=self.error)

	def get_message_properties(self, handle):
		self.map.ListMessages("", dict())
		path = self.path + "/message" + handle
		obj = bus.get_object("org.bluez.obex.client", path)
		msg = dbus.Interface(obj, "org.bluez.obex.Message")
		ret = msg.GetProperties()
		print pformat(unwrap(ret))

	def set_message_property(self, handle, prop, flag):
		self.map.ListMessages("", dict())
		path = self.path + "/message" + handle
		obj = bus.get_object("org.bluez.obex.client", path)
		msg = dbus.Interface(obj, "org.bluez.obex.Message")
		msg.SetProperty (prop, flag);

	def update_inbox(self):
		self.map.UpdateInbox()

	def send_mail (self):
		prop = dict();
		prop["Charset"] = "UTF-8"
		prop["Transparent"] = False
		prop["Retry"] = True
		self.map.SetFolder("/telecom/msg/outbox")
		self.map.PushMessage ("/telecom/msg/outbox", prop, phone)

if  __name__ == '__main__':

	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	parser = OptionParser()

	(options, args) = parse_options()

	if not options.device:
		parser.print_help()
		exit(0)

	bus = dbus.SessionBus()
	mainloop = gobject.MainLoop()

	client = dbus.Interface(bus.get_object("org.bluez.obex.client", "/"),
				"org.bluez.obex.Client")

	print "Creating Session"
	path = client.CreateSession(options.device, { "Target": "map" })

	map_client = MapClient(path, options.verbose)

	if options.new_dir:
		map_client.set_folder(options.new_dir)

	if options.ls_dir:
		map_client.list_folders()

	if options.ls_msg is not None:
		map_client.list_messages(options.ls_msg)

	if options.get_msg is not None:
		map_client.get_message(options.get_msg)

	if options.get_msg_properties is not None:
		map_client.get_message_properties(options.get_msg_properties)

	if options.mark_msg_read is not None:
		map_client.set_message_property(options.mark_msg_read, "Read", True)

	if options.mark_msg_unread is not None:
		map_client.set_message_property(options.mark_msg_unread, "Read", False)

	if options.mark_msg_deleted is not None:
		map_client.set_message_property(options.mark_msg_deleted, "Deleted", True)

	if options.mark_msg_undeleted is not None:
		map_client.set_message_property(options.mark_msg_undeleted, "Deleted", False)

	if options.update_inbox:
		map_client.update_inbox()

	if options.send_mail:
		map_client.send_mail()

	mainloop.run()
